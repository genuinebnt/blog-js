import { User, UserRepository } from "#domain/entities/user.js";

/**
 * Service class that implements application-specific business logic for Users.
 *
 * In the hexagonal architecture pattern, the UserService belongs to the application layer
 * and acts as an orchestrator between the outer world (controllers/interfaces) and
 * the domain layer. It coordinates the use of domain entities and repositories
 * to fulfill business operations but does not contain domain rules itself.
 *
 * This service delegates actual data persistence operations to the UserRepository,
 * which is injected via dependency injection to maintain loose coupling.
 */
export class UserService {
  /**
   * Creates a UserService instance.
   *
   * @param userRepo - An implementation of UserRepository interface for user data persistence
   */
  constructor(private readonly userRepo: UserRepository) {}

  /**
   * Creates a new user in the system.
   *
   * @param user - User data without ID (ID will be generated by the repository)
   * @returns Promise resolving to the created User entity with assigned ID
   * @throws Error if user creation fails (e.g., duplicate email)
   */
  async createUser(user: Omit<User, "id">): Promise<User> {
    return this.userRepo.create(user);
  }

  /**
   * Deletes a user from the system by their ID.
   *
   * @param id - Unique identifier of the user to delete
   * @returns Promise resolving to boolean indicating whether deletion was successful
   */
  async deleteUser(id: string): Promise<boolean> {
    return this.userRepo.delete(id);
  }

  /**
   * Retrieves a single user by their ID.
   *
   * @param id - Unique identifier of the user to retrieve
   * @returns Promise resolving to the User entity if found, or null if not found
   */
  async getUser(id: string): Promise<null | User> {
    return this.userRepo.findById(id);
  }

  /**
   * Retrieves all users from the system.
   *
   * @returns Promise resolving to an array of User entities
   */
  async getUsers(): Promise<User[]> {
    return this.userRepo.findAll();
  }

  /**
   * Updates an existing user's information.
   *
   * @param id - Unique identifier of the user to update
   * @param user - Partial user data containing only the fields to be updated
   * @returns Promise resolving to the updated User entity, or null if user not found
   */
  async updateUser(
    id: string,
    user: Partial<Omit<User, "id">>,
  ): Promise<null | User> {
    return this.userRepo.update(id, user);
  }
}
