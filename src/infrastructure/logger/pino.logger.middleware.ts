import { requestContext } from "#infrastructure/context/request-context.js";
import { NextFunction, Request, Response } from "express";
import pino from "pino";
import { pinoHttp } from "pino-http";
import { v4 as uuidv4 } from "uuid";

import { pinoInstance } from "./pino.logger.js";

// Create the base Pino HTTP logger instance
const basePinoHTTP = pinoHttp({
  // Override attribute keys for the log object
  customAttributeKeys: {
    err: "error",
    req: "request",
    res: "response",
    responseTime: "timeTaken",
  },

  // Define a custom error message
  customErrorMessage: function (req, res) {
    return "request errored with status code: " + res.statusCode.toString();
  },

  // Define a custom logger level
  customLogLevel: function (req, res, err) {
    if (res.statusCode >= 400 && res.statusCode < 500) {
      return "warn";
    } else if (res.statusCode >= 500 || err) {
      return "error";
    } else if (res.statusCode >= 300 && res.statusCode < 400) {
      return "silent";
    }
    return "info";
  },

  // Define a custom request id function
  genReqId: function (req, res) {
    const existingID = req.id || req.headers["x-request-id"];
    if (existingID) return existingID;
    const id = uuidv4();
    res.setHeader("X-Request-Id", id);
    return id;
  },

  // Reuse an existing logger instance
  logger: pinoInstance,

  // Define custom serializers
  serializers: {
    err: pino.stdSerializers.err,
    req: pino.stdSerializers.req,
    res: pino.stdSerializers.res,
  },

  // Set to `false` to prevent standard serializers from being wrapped.
  wrapSerializers: true,
});

/**
 * Enhanced Pino HTTP middleware that wraps the original middleware
 * and stores the request ID in the request context using AsyncLocalStorage
 */
export const pinoHTTPInstance = (
  req: Request,
  res: Response,
  next: NextFunction,
) => {
  // Call the original Pino HTTP middleware first to generate and attach the request ID
  basePinoHTTP(req, res, (err?: Error) => {
    if (err) {
      next(err);
      return;
    }

    // Get the request ID that was generated by the Pino HTTP middleware
    const requestId = req.id as string;

    // Run the rest of the middleware chain within the context of this request ID
    requestContext.run(requestId, () => {
      next();
    });
  });
};
